//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;

namespace RosMessageTypes.RoboticsDemo
{
    public class TestMsg : Message
    {
        public const string RosMessageName = "robotics_demo/TestMsg";

        public float[] cube_pos;
        public float[] ball_pos;
        public float[] ball_vel;

        public TestMsg()
        {
            this.cube_pos = new float[0];
            this.ball_pos = new float[0];
            this.ball_vel = new float[0];
        }

        public TestMsg(float[] cube_pos, float[] ball_pos, float[] ball_vel)
        {
            this.cube_pos = cube_pos;
            this.ball_pos = ball_pos;
            this.ball_vel = ball_vel;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            
            listOfSerializations.Add(BitConverter.GetBytes(cube_pos.Length));
            foreach(var entry in cube_pos)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(ball_pos.Length));
            foreach(var entry in ball_pos)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(ball_vel.Length));
            foreach(var entry in ball_vel)
                listOfSerializations.Add(BitConverter.GetBytes(entry));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            
            var cube_posArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.cube_pos= new float[cube_posArrayLength];
            for(var i = 0; i < cube_posArrayLength; i++)
            {
                this.cube_pos[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }
            
            var ball_posArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.ball_pos= new float[ball_posArrayLength];
            for(var i = 0; i < ball_posArrayLength; i++)
            {
                this.ball_pos[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }
            
            var ball_velArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.ball_vel= new float[ball_velArrayLength];
            for(var i = 0; i < ball_velArrayLength; i++)
            {
                this.ball_vel[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }

            return offset;
        }

        public override string ToString()
        {
            return "TestMsg: " +
            "\ncube_pos: " + System.String.Join(", ", cube_pos.ToList()) +
            "\nball_pos: " + System.String.Join(", ", ball_pos.ToList()) +
            "\nball_vel: " + System.String.Join(", ", ball_vel.ToList());
        }
    }
}
